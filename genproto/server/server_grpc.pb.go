// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrafanaClient is the client API for Grafana service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrafanaClient interface {
	GetOrgToken(ctx context.Context, in *GetOrgTokenRequest, opts ...grpc.CallOption) (*GetOrgTokenResponse, error)
	PublishStream(ctx context.Context, in *PublishStreamRequest, opts ...grpc.CallOption) (*PublishStreamResponse, error)
}

type grafanaClient struct {
	cc grpc.ClientConnInterface
}

func NewGrafanaClient(cc grpc.ClientConnInterface) GrafanaClient {
	return &grafanaClient{cc}
}

func (c *grafanaClient) GetOrgToken(ctx context.Context, in *GetOrgTokenRequest, opts ...grpc.CallOption) (*GetOrgTokenResponse, error) {
	out := new(GetOrgTokenResponse)
	err := c.cc.Invoke(ctx, "/server.Grafana/GetOrgToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafanaClient) PublishStream(ctx context.Context, in *PublishStreamRequest, opts ...grpc.CallOption) (*PublishStreamResponse, error) {
	out := new(PublishStreamResponse)
	err := c.cc.Invoke(ctx, "/server.Grafana/PublishStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrafanaServer is the server API for Grafana service.
// All implementations should embed UnimplementedGrafanaServer
// for forward compatibility
type GrafanaServer interface {
	GetOrgToken(context.Context, *GetOrgTokenRequest) (*GetOrgTokenResponse, error)
	PublishStream(context.Context, *PublishStreamRequest) (*PublishStreamResponse, error)
}

// UnimplementedGrafanaServer should be embedded to have forward compatible implementations.
type UnimplementedGrafanaServer struct {
}

func (UnimplementedGrafanaServer) GetOrgToken(context.Context, *GetOrgTokenRequest) (*GetOrgTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgToken not implemented")
}
func (UnimplementedGrafanaServer) PublishStream(context.Context, *PublishStreamRequest) (*PublishStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishStream not implemented")
}

// UnsafeGrafanaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrafanaServer will
// result in compilation errors.
type UnsafeGrafanaServer interface {
	mustEmbedUnimplementedGrafanaServer()
}

func RegisterGrafanaServer(s grpc.ServiceRegistrar, srv GrafanaServer) {
	s.RegisterService(&Grafana_ServiceDesc, srv)
}

func _Grafana_GetOrgToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafanaServer).GetOrgToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Grafana/GetOrgToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafanaServer).GetOrgToken(ctx, req.(*GetOrgTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grafana_PublishStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafanaServer).PublishStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Grafana/PublishStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafanaServer).PublishStream(ctx, req.(*PublishStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Grafana_ServiceDesc is the grpc.ServiceDesc for Grafana service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Grafana_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.Grafana",
	HandlerType: (*GrafanaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrgToken",
			Handler:    _Grafana_GetOrgToken_Handler,
		},
		{
			MethodName: "PublishStream",
			Handler:    _Grafana_PublishStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

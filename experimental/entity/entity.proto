syntax = "proto3";
package entity;

option go_package = "./;entity";

message EntityMessage {
    // Path encodes the UID and kind.  It will include / to indicate folders
    string path = 1; 

    // The kind (extracted from path suffix)
    string kind = 2;

    // The raw entity bytes
    bytes payload = 3; 

    // Metadata managed by the underlying storage engine(s)
    StorageMetadata meta = 4; 
}

// System manages these properties
message StorageMetadata {
    // Unix millis for the creation time
    int64 createdAt = 1;

    // Unix millis for last update time
    int64 updatedAt = 2;

    // UserID that last updated the entity
    string updatedBy = 3;

    // Version identifier. This may include additional location information (branch/revision/etc)
    // The version string is not sortable with other versions
    string version = 4; 

    // Content checksum
    string etag = 5; 

    // Size in bytes
    int64 size = 6;

    // list of operations the calling user can perform
    repeated string allowedOperations = 7; 

    // avaliable PRs for this path
    repeated EntityPR prs = 8; 
}

message EntityPR {
    // PR Title
    string name = 1;

    // passed to get and it will load the content
    string version = 2; 

    // Unix millis for last update time
    int64 updatedAt = 3;

    // External URL
    string url = 4;
}

message FolderListing {
    string path = 1; 

    // Child entity information
    repeated EntityMessage items = 2;

    // More items exist
    string nextPageToken = 3;
}

message EntityHistory {
    // the version that will load the entity object
    string version = 1; 
    // Unix millis when the event happened
    int64 when = 2; 
    // Identifier for the source 
    string who = 3; 
    // optional path to source location
    string comment = 4; 
}

message EntityHistoryResponse {
    string path = 1;
    
    repeated EntityHistory event = 2;

    // optional path to source location
    string nextPageToken = 3; 
}

message KindInfo {
    string ID = 1;
    string description = 2;
    string category = 3;

    // Detect the kind from a path suffix
    string pathSuffix = 4;

    // Latest verson of the schema
    string latestSchemaVersion = 5;

    // For kinds with secure keys -- the keys will be strpped unless user has editor access
    bool hasSecureKeys = 6;

	// The entity store does not extend the base EntityEnvelope -- this is typical for
	// non-object-model formats like images (png, svg, etc)
    bool isRaw = 7;

    // For raw content types, this is set as an HTTP header
    string contentType = 8;
}

//---------------------------------------------------------
// Resource service enables HTTP-style requests over gRPC.
//---------------------------------------------------------

message GetEntityRequest {
    // Path encodes the UID + kind.  The schema registry will know how to map suffix to registered kinds
    string path = 1; 

    // Version specifies which version of the 
    string version = 2;  

    // Include storage metadata in the response
    bool withStorageMeta = 3;

    // Include the entity payload in response
    bool withPayload = 4;

    // Augment results with access restrictions
    bool withACL = 5;

    // Include a list of alternative versions (support depends on storage engine) 
    bool withPRs = 6;
}

message ListFolderRequest {
    string path = 1; 

    string filterKind = 2;

    // Include storage metadata for each item
    bool withStorageMeta = 3;

    // Include the entity payload for each item
    bool withPayload = 4;

    // Optional next token to iterate with
    string pageToken = 5; 
    
    // max items in the list
    int32 maxResults = 6; 
}

message GetHistoryRequest {
    string path = 2; 
    string pageToken = 4;  
    int32 maxResults = 5; 
}

message SaveEntityRequest {
    string path = 1; 

    bytes payload = 2;

    string comment = 3; 

    // When set, this will implement optimistic locking
    string previousVersion = 4;  
}

message CreatePullRequest {
    // Path to the entity we want to change
    string path = 1; 

    // Title for the new change requests
    string title = 2;

    // Comment in the new change request
    string comment = 3; 

    // Proposed payload for the enitty
    bytes payload = 4;
}

message DeleteEntityRequest {
    // encodes uid + kind
    string path = 1; 

    // Version may only be supported for pull requests
    string version = 2; 

    // Recursive only supported for folders
    bool recursive = 3;
}

message DeleteResponse {
    bool ok = 1; 
}

message ListKindsRequest {}
message ListKindsResponse {
    repeated KindInfo kinds = 1;
}

service EntityStore {
    rpc GetEntity(GetEntityRequest) returns (EntityMessage);
    rpc ListFolder(ListFolderRequest) returns (FolderListing); 
    rpc SaveEntity(SaveEntityRequest) returns (EntityMessage); 
    rpc DeleteEntity(DeleteEntityRequest) returns (DeleteResponse);
    rpc GetEntityHistory(GetHistoryRequest) returns (EntityHistoryResponse);
    rpc CreatePR(CreatePullRequest) returns (EntityMessage); 

    rpc ListKinds(ListKindsRequest) returns (ListKindsResponse); 

    // Later... 
    rpc WatchEntity(GetEntityRequest) returns (stream EntityMessage);
}

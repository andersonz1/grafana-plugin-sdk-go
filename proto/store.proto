syntax = "proto3";
package pluginv2;

option go_package = "./;pluginv2";

message EntityReference {
  string kind = 1;
  string grn = 2; // includes folder pattern -- may include git branch info
}

//-----------------------------------------------
// GET
//-----------------------------------------------

message GetRequest {
  PluginContext pluginContext = 1;

  EntityReference ref = 2;
}

message GetResponse {
  int32 code = 1;
  string grn = 2;
  string kind = 3;  // dashboard | alert | datasource | panel (library) | ...  
  string name = 4;
  string description = 5;
  string schemaVersion = 6; // [scumata version?]
  repeated string tags = 7;

  // ??? linked essential entities?
  // what about variable datasources?
  // library panels?
  repeated EntityReference references = 8;

  // lineage
  int64 created = 9;
  int64 updated = 10;
  repeated string author = 11; // everyone who touched it?

  // ????? current secureJSON???
  map<string,string> decryptedSecureProps = 9;

  // The raw values
  string contentType = 12; // json | csv | image/png | ...
  bytes body = 13;
}

//-----------------------------------------------
// Write
//-----------------------------------------------

message WriteRequest {
  PluginContext pluginContext = 1;
  EntityReference ref = 2;
  string name = 4;
  string description = 5;
  string schemaVersion = 7; // [scumata version?]
  repeated string tags = 6;

  // The raw values
  bytes body = 9;
}

message WriteResponse {
  int32 code = 1;
}

//-----------------------------------------------
// DELETE
//-----------------------------------------------

message DeleteRequest {
  PluginContext pluginContext = 1;
  EntityReference ref = 2;
}

message DeleteResponse {
  int32 code = 1;
}

//-----------------------------------------------
// WATCH
//-----------------------------------------------

message WatchRequest {
  PluginContext pluginContext = 1;

  string kind = 2; // filter to a specific kind of eneity (ie, only dashboards)
  string grn = 3; // the entity ID or folder prefix
  bool recursive = 4; // when true, all changes to this + any substrings will be sent to the caller
  bool details = 5;
}

message WatchResponse {
  int64 timestamp = 1;
  EntityReference ref = 2;
  string action = 3; // CREATE + UPDATE + DELETE

  // when details = true, send the whole response
  GetResponse details = 4;
}

//-----------------------------------------------
// Service
//-----------------------------------------------

service Store {
  rpc GetEntity(GetRequest) returns (GetResponse);
  rpc WriteEntity(WriteRequest) returns (WriteResponse); 
  rpc DeleteEntity(DeleteRequest) returns (DeleteResponse); 
  rpc WatchStore(WatchRequest) returns (stream WatchResponse); 
}

// NOTE: list and search will be handled by another service!
// This is JUST for getting the images once you know where they are
